/* -*- mode: c++; c-basic-offset: 3 -*-
 *
 * Copyright (c) 2013, GREYC.
 * All rights reserved
 *
 * You may use this file under the terms of the BSD license as follows:
 *
 * "Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *   * Neither the name of the GREYC, nor the name of its
 *     contributors may be used to endorse or promote products
 *     derived from this software without specific prior written
 *     permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
 *
 * For more information, refer to:
 * https://clouard.users.greyc.fr/Pandore/
 */

#include <pandore.h>
using namespace pandore;

/**
 * @author XXXX - 2006-03-27
 */

/**
 * @file operator.cc
 * @brief A brief description of the content.
 *
 * A more detail description of the content, for
 * example: algorithm, reference ...
 */

##begin Operator(TYPE1, VOISS)
/**
 * Comments.
 * @param ims	description of the parameter ims.
 * @param imd	description of the parameter imd.
 * @param nbvois	description of the parameter nbvois.
 */
Errc Operator( const TYPE1 &ims, TYPE1 &imd, Short nbvois ) {

  return SUCCESS;
}
## append loadcases
   if (objs[0]->Type() == Po_$TYPE1) {
      TYPE1 *const ims = (TYPE1*)objs[0];
      objd[0] = new TYPE1(ims->Props());
      TYPE1 *const imd = (TYPE1*)objd[0];
      result = Operator(*ims, *imd, (Float)atof(parv[0]));
   } else
## end
##end
   
##; Generates Operator for Img1d<T>, Img2d<T> and Img3d<T>.
##forall(Operator, /Img.d/)

##; Generates Operator for Reg2d and Reg3d
##forall(Operator, /Reg[23]d/)
   
#ifdef MAIN
#define	USAGE	"usage: %s connexity [-m mask] [im_in|-] [im_out|-]"
#define	PARC	1
#define	FINC	1
#define	FOUTC	1
#define	MASK	0

##main(PARC, FINC, FOUTC, MASK, USAGE)
#endif
